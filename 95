Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
题解：其实这道题给的是一个结点总数，让这几个结点总共能够构成的不同的BST的个数，其实这是一个卡特兰数的问题，
卡特兰数的公式正是用来求这个问题的，所以卡特兰数的公式C(n,2n)/(n+1)就是这道题目的解。
   
Answer:
class Solution {
    public:
    	int numTrees(int n) {
			if(n==0||n==1) return 1;
			long long ans=1;
			int rest=n,cnt=0;
			n=n*2;
			while(cnt<rest) {
				ans*=n;
				cnt++;
				ans/=cnt;
				n--;
			}
			return ans/(n+1);
		}
};
